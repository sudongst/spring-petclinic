pipeline {
  agent any
    tools {
    maven "M3"
    jdk "JDK11"
    }
  
  parameters {
    string(name: 'REPOSITORY_NAME', defaultValue: 'https://github.com/sudongst/spring-petclinic.git/', description: 'How should I greet the world?')
    }

  environment {
    AWS_CREDENTIAL_NAME = "awsEcrcredential"
    AWS_ACCOUNT_ID = "257307634175"
    REGION = "ap-northeast-2"
    DOCKER_IMAGE_NAME="project02-spring-petclinic"
    DOCKER_TAG="1.0"
    ECR_REPOSITORY = "${AWS_ACCOUNT_ID}.dkr.ecr.ap-northeast-2.amazonaws.com"
    ECR_DOCKER_IMAGE = "${ECR_REPOSITORY}/${DOCKER_IMAGE_NAME}"
    ECR_DOCKER_TAG = "${DOCKER_TAG}"
    CODEDEPLOY_NAME = "project02"
    CODEDEPLOY_GROUP_NAME = "project02-code-deploy-group"
    REPOSITORY_NAME = "https://github.com/sudongst/spring-petclinic.git/"
  }
  
  stages {
    stage('Git fatch') {
      steps {
        echo 'Git fatch'
        git url: 'https://github.com/sudongst/spring-petclinic.git/',
          branch: 'main', credentialsId: 'gitCredential'
      }
    }
    stage('Maven Build') {
      steps {
        echo 'Maven Build'
        sh 'mvn -Dmaven.test.failure.ignore=true clean package'
      }
    }
    
    stage('Docker Image') {
      steps {
        echo 'Docker Image'
        dir("${env.WORKSPACE}") {
        sh 'docker build -t ${ECR_DOCKER_IMAGE}:${ECR_DOCKER_TAG} .'
            }
        }
    }
    
    stage('Image Push') {
      steps {
        echo 'Image Psuh'
        script{
           // cleanup current user docker credentials
  sh 'rm -f ~/.dockercfg ~/.docker/config.json || true'                    
                   
  docker.withRegistry("https://${ECR_REPOSITORY}", "ecr:${REGION}:${AWS_CREDENTIAL_NAME}") {
    docker.image("${ECR_DOCKER_IMAGE}:${ECR_DOCKER_TAG}").push()
            }
        }
      }        
  }
    
    
      stage('Codedeploy Workload') {
        steps {
          echo 'Codedeploy Workload'
          script{
            sh '''
                    aws deploy create-deployment \
                      --application-name ${CODEDEPLOY_NAME} \
                      --deployment-group-name ${CODEDEPLOY_GROUP_NAME} \
                      --region ${REGION} \
                      --revision revisionType=GitHub,repository=${REPOSITORY_NAME},commitId=${GIT_COMMIT} \
                      --file-exists-behavior OVERWRITE \
                      --output json > DEPLOYMENT_ID.json
              '''
           
          }
        }
      }
   }
  }
